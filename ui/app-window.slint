import "../fonts/Orbitron-Regular.ttf";
import "../fonts/DS-DIGII.ttf";
import "../fonts/SourceCodePro-VariableFont_wght.ttf";
import "../fonts/CascadiaCode-VariableFont_wght.ttf";
import { Button, VerticalBox, Palette, Slider, Spinner, HorizontalBox, TabWidget, LineEdit, ScrollView } from "std-widgets.slint";
import { Styles } from "styles.slint";
import { Mpris} from "mpris.slint";
import { PowerMenuButton, MenuButton, GeneralButton, SearchButton, AppDisplayButton, WorkspaceButton, BarButton} from "buttons.slint";
import { GeneralSlider, SystemInfo, AppViewer} from "menu.slint";
import { AppLineData, Cards, State, SearchButtonData, BarState } from "data_structures.slint";

export global Rice {
    pure callback call_pavucontrol();
    pure callback get_volume() -> string;
}

export component TopBar inherits Window {
    callback request-menu-toggle();
    callback walls_window_called();
    callback open-app(string);
    callback query-applications(string);
    // in-out property <bool> is_search_on: false;
    in-out property <BarState> state: { is_search_on: false };
    in-out property <string> time_var: "dhcs";
    in-out property <bool> walls_open: false;
    in property <[AppLineData]> app_lines: [];
    in property <[SearchButtonData]> topbar_buttons: [
        { text_val: "Apps", place_no: 1 },
        { text_val: "Clipboard", place_no: 2 },
        { text_val: "Wifi", place_no: 3 },
        { text_val: "Bluetooth", place_no: 4 },
        { text_val: "Walls", place_no: 5 },
        { text_val: "Color Picker", place_no: 6 },
        { text_val: "Emjois", place_no: 7 }
    ];

    in property <[length]> positions: [27px, 114px, 195px, 168px, 141px, 54px, 27px];
    in property <[length]> width-bar: [80px, 20px, 20px, 20px, 80px, 20px, 20px];
    in property <[string]> bar-text: [Rice.get_volume(), "", "H", "", "", "", ""];
    property <int> which-selected: 1;
    background: transparent;
    height: 610px;
    width: 1366px;

    Rectangle {
        x: 0px;
        y: 29px;
        height: 10px;
        background: transparent;
        Path {
            x: 7px;
            commands: "M 7 8 L 7 3 L 12 3 C 9 4 8 5 7 8";
            stroke: black;
            fill: black;
            width: 10px;
        }

        Path {
            x: 1356px;
            commands: "M 7 3 L 12 3 L 12 8 C 11 5 10 4 7 3";
            stroke: black;
            fill: black;
            width: 10px;
        }
    }

    Rectangle {
        clip: true;
        x: 0px;
        y: 0px;
        height: walls_open ? 350px : 30px;
        width: 1366px;
        background: Styles.dark-background;
        animate height { duration: 200ms; }

        Rectangle {
            out property <bool> click_event: false;
            height: 350px - 30px;
            width: 1366px;
            y: walls_open ? 30px : 0px;
            background: click_event ? blue : black;
            Text {
                color: Styles.font-color-light;
                text: "Walls will come";
                font-size: 150px;
            }

            TouchArea {
                clicked => {
                    if click_event {
                        click_event = false;
                    } else {
                        click_event = true;
                    }
                }
            }

            animate y { duration: 200ms; }
        }

        Rectangle {
            clip: true;
            y: 0px;
            background: black;
            height: 30px;

            Rectangle {
                x: 5px;
                width: 20px;
                background: Styles.dark-background;
                Image {
                    y: 7px;
                    width: 18px;
                    source: @image-url("../assets/icons/artixlinux.svg");
                    colorize: white;
                }

                TouchArea {
                    clicked => {
                        root.request-menu-toggle();
                        walls_open = false;
                        which-selected = 1;
                        if state.is_search_on {
                            state.is_search_on = false;
                            entryarea.clear-focus();
                        } else {
                            state.is_search_on = true;
                            entryarea.focus();
                            // entryarea.select-all();
                        }
                    }
                }
            }

            Rectangle {
                clip: true;
                x: 30px;
                y: state.is_search_on ? 0px : -42px;
                width: 495px;
                height: 30px;
                background: Styles.dark-background;
                entryarea := LineEdit {
                    y: 5px;
                    width: parent.width - 10px;
                    height: 20px;
                    x: 5px;
                    placeholder-text: "Search in " + topbar_buttons[which-selected - 1].text_val + "...";
                    edited(text) => {
                        root.query_applications(text)
                    }
                    key-pressed(event) => {
                        if event.text == Key.Escape {
                            root.request-menu-toggle();
                            walls_open = false;
                            which-selected = 1;
                            if state.is_search_on {
                                state.is_search_on = false;
                                entryarea.focus();
                            } else {
                                state.is_search_on = true;
                                entryarea.clear-focus();
                                entryarea.select-all();
                            }
                            accept;
                        } else if event.text == Key.RightArrow {
                            if which-selected < 7 {
                                which-selected += 1;
                                if which-selected == 5 {
                                    root.walls_window_called();
                                    walls_open = true;
                                } else {
                                    walls_open = false;
                                }
                            }
                            accept;
                        } else if event.text == Key.LeftArrow {
                            if which-selected > 1 {
                                which-selected -= 1;
                                if which-selected == 5 {
                                    root.walls_window_called();
                                    walls_open = true;
                                } else {
                                    walls_open = false;
                                }
                            }
                            accept;
                        } else if event.text == "1" {
                            walls_open = false;
                            which-selected = 1;
                            walls_open = false;
                            accept;
                        } else if event.text == "2" {
                            walls_open = false;
                            if which-selected == 2 {
                                which-selected = 1;
                            } else {
                                which-selected = 2;
                            }
                            accept;
                        } else if event.text == "3" {
                            walls_open = false;
                            if which-selected == 3 {
                                which-selected = 1;
                            } else {
                                which-selected = 3;
                            }
                            accept;
                        } else if event.text == "4" {
                            walls_open = false;
                            if which-selected == 4 {
                                which-selected = 1;
                            } else {
                                which-selected = 4;
                            }
                            accept;
                        } else if event.text == "5" {
                            if which-selected == 5 {
                                which-selected = 1;
                                walls_open = false;
                            } else {
                                walls_open = true;
                                which-selected = 5;
                                root.walls_window_called();
                            }
                            which-selected = 5;
                            root.walls_window_called();
                            walls_open = true;
                            accept;
                        } else if event.text == "6" {
                            walls_open = false;
                            if which-selected == 6 {
                                which-selected = 1;
                            } else {
                                which-selected = 6;
                            }
                            accept;
                        } else if event.text == "7" {
                            walls_open = false;
                            if which-selected == 7 {
                                which-selected = 1;
                            } else {
                                which-selected = 7;
                            }
                            accept;
                        } else {
                            reject;
                        }
                    }
                }

                animate y {
                    easing: ease-in-out-back;
                    duration: 500ms;
                }
            }

            Rectangle {
                x: 535px;
                y: state.is_search_on ? 0px : -32px;
                width: root.width - 600px;
                HorizontalLayout {
                    padding: 4px;
                    spacing: 5px;
                    alignment: LayoutAlignment.stretch;
                    for action_button[i] in topbar_buttons: SearchButton {
                        is-selected: which-selected == action-button.place_no;
                        place_no: action-button.place_no;
                        text_value: action-button.text_val;
                        on-clicked => {
                            if action-button.text_val == "Walls" {
                                root.walls_window_called();
                                if walls_open {
                                    walls_open = false;
                                    which-selected = 1;
                                } else {
                                    walls_open = true;
                                    which-selected = 5;
                                }
                            } else {
                                if which-selected == action-button.place-no {
                                    which-selected = 1;
                                } else {
                                    walls_open = false;
                                    which-selected = action-button.place-no;
                                }
                            }
                        }
                    }
                }

                animate y {
                    easing: ease-out-back;
                    duration: 500ms;
                }
            }

            for width[i] in width-bar: BarButton {
                position: i == 0 || i == 1 ? (positions[i]) : parent.width - positions[i];
                is_search_on: state.is_search_on;
                button-width: width;
                display_text: bar-text[i];
                on_clicked => {
                    if i == 0 {
                        Rice.call_pavucontrol();
                    }
                }
            }

            Rectangle {
                background: clock.has-hover ? Styles.base-background : Styles.dark-background;
                x: state.is_search_on ? root.width - 65px : 635px;
                y: -5px;
                width: 100px;
                border-radius: self.height / 2;
                Text {
                    y: 3px;
                    horizontal-alignment: TextHorizontalAlignment.center;
                    vertical-alignment: TextVerticalAlignment.center;
                    text: time_var;
                    color: Styles.font-color-light;
                    font-size: 20px;
                }

                animate x { duration: 200ms; }
                clock := TouchArea {
                    clicked => {
                    }
                }
            }
        }
    }

    AppViewer {
        walls_open: walls_open;
        is_search_on: state.is_search_on;
        app_lines: app_lines;
        current_window: which-selected;
        open-app(action) => {
            state.is_search_on = false;
            root.open-app(action)
        }
    }
}

export component Menu inherits Window {
    width: 376px;
    height: 576px;
    background: transparent;
    default-font-family: "Urbanist-Regular";
    in-out property <State> state: { is-power-menu-open: false };
    callback request-hide();

    // property <bool> is-power-menu-open: state.is-power-menu-open;
    mainrec := Rectangle {
        background: Styles.dark-background;
        border-radius: 10px;
        clip: true;

        menu := VerticalLayout {
            x: 50px;
            y: 0px;
            width: root.width - 50px;
            padding: Styles.padding;
            alignment: LayoutAlignment.start;
            spacing: Styles.padding;

            Text {
                text: "Hello Ramayen !";
                color: Styles.font-color-light;
                font-size: 30px;
                font-family: "Urbanist-Bold";
            }

            Rectangle {
                HorizontalLayout {
                    VerticalLayout {
                        Text {
                            text: "07: 37: 46 PM ";
                            color: Styles.font-color-light;
                            font-size: 25px;
                        }

                        Text {
                            text: "Sunday, 11th May";
                            color: Styles.font-color-light;
                            font-size: 20px;
                        }
                    }

                    GeneralButton { }
                }
            }

            Rectangle {
                background: Styles.base-background;
                border-radius: 15px;
                border-width: 2px;
                border-color: Styles.border-color;
                HorizontalLayout {
                    alignment: LayoutAlignment.space-around;
                    padding: Styles.padding;
                    // spacing: 10px;
                    MenuButton {
                        icon: @image-url("../assets/icons/light-bulb.svg");
                    }

                    MenuButton {
                        icon: @image-url("../assets/icons/zen-on.svg");
                    }

                    MenuButton {
                        icon: @image-url("../assets/icons/font-question.svg");
                    }

                    MenuButton {
                        icon: @image-url("../assets/icons/wifi.svg");
                    }

                    MenuButton {
                        icon: @image-url("../assets/icons/bluetooth.svg");
                    }
                }
            }

            mpris := Mpris { }

            Rectangle {
                background: Styles.base-background;
                border-radius: 10px;
                border-width: 2px;
                border-color: Styles.border-color;
                VerticalLayout {
                    padding: Styles.padding;
                    spacing: Styles.padding;
                    GeneralSlider { }

                    GeneralSlider { }

                    GeneralSlider { }
                }
            }

            HorizontalLayout {
                SystemInfo {
                    info-name: "CPU Usage";
                }

                SystemInfo {
                    info-name: "Temp Usage";
                }
            }
        }

        power-menu := Rectangle {
            x: 0px;
            background: Styles.base-background;
            border-top-left-radius: 10px;
            border-bottom-left-radius: 10px;
            width: state.is-power-menu-open ? 200px : 50px;

            animate width { duration: 200ms; }

            VerticalLayout {
                max-width: power-menu.width;
                height: mainrec.height;
                x: 0px;
                alignment: LayoutAlignment.stretch;
                padding: Styles.padding;

                Rectangle {
                    x: 0px;
                    height: 40px;
                    width: 30px;
                    clip: true;
                    border-radius: 8px;
                    border-width: 4px;
                    border-color: Styles.border-color;
                    Image {
                        x: 0px;
                        y: 0px;
                        width: 30px;
                        height: 40px;
                        source: @image-url("../assets/logo_dark.png");
                    }
                }

                VerticalLayout {
                    alignment: LayoutAlignment.end;
                    spacing: Styles.padding;
                    PowerMenuButton {
                        icon: @image-url("../assets/icons/power.svg");

                        is-open: state.is-power-menu-open;
                        button-width: power-menu.width - 20px;
                        label: "Shutdown";
                        clicked => {
                            if state.is-power-menu-open {
                                state = { is-power-menu-open: false };
                            } else {
                                state.is-power-menu-open = true;
                            }
                        }
                    }

                    PowerMenuButton {
                        icon: @image-url("../assets/icons/suspend.svg");

                        is-open: state.is-power-menu-open;
                        button-width: power-menu.width - 20px;
                        label: "Suspend";
                        clicked => {
                            if state.is-power-menu-open {
                                state.is-power-menu-open = false;
                            } else {
                                state.is-power-menu-open = true;
                            }
                        }
                    }

                    PowerMenuButton {
                        icon: @image-url("../assets/icons/lock.svg");
                        is-open: state.is-power-menu-open;
                        button-width: power-menu.width - 20px;
                        label: "Lock Screen";
                        clicked => {
                            if state.is-power-menu-open {
                                state.is-power-menu-open = false;
                            } else {
                                state.is-power-menu-open = true;
                            }
                        }
                    }

                    PowerMenuButton {
                        icon: @image-url("../assets/icons/log-out.svg");
                        is-open: state.is-power-menu-open;
                        button-width: power-menu.width - 20px;
                        label: "Log Out";
                        clicked => {
                            if state.is-power-menu-open {
                                state.is-power-menu-open = false;
                            } else {
                                state.is-power-menu-open = true;
                            }
                        }
                    }

                    PowerMenuButton {
                        icon: @image-url("../assets/icons/chevron-right.svg");
                        icon-open: @image-url("../assets/icons/chevron-left.svg");
                        is-open: state.is-power-menu-open;
                        button-width: power-menu.width - 20px;
                        is-special: true;
                        clicked => {
                            if state.is-power-menu-open {
                                state.is-power-menu-open = false;
                            } else {
                                state.is-power-menu-open = true;
                            }
                        }
                    }
                }
            }
        }
    }
}

export component HideWin inherits Window {
    callback request-hide();
    Text {
        horizontal-alignment: TextHorizontalAlignment.center;
        vertical-alignment: TextVerticalAlignment.center;
        text: "Hello";
    }

    TouchArea {
        clicked => {
            root.request-hide();
        }
    }
}

export component ScrollEx inherits Window {
    height: 35px;
    width: 1366px;
    background: Styles.dark-background;
    Rectangle {
        x: 5px;
        width: 20px;
        Image {
            width: 18px;
            source: @image-url("../assets/icons/artixlinux.svg");
            colorize: white;
        }
    }

    Rectangle {
        x: 30px;
        y: 0px;
        width: 495px;
        background: Styles.dark-background;
        // border-radius: 10px;
        // clip: true;
        // background: pink;
        LineEdit {
            width: parent.width;
            height: 25px;
            x: 5px;
            placeholder-text: "Search Apps..";
        }

        animate y {
            easing: ease-in-out-back;
            duration: 500ms;
        }
    }

    Rectangle {
        x: 535px;
        y: 0px;
        width: root.width - 600px;
        ScrollView {
            width: parent.width;
            viewport-width: 800px;
            HorizontalLayout {
                padding: 2px;
                spacing: 5px;
                alignment: LayoutAlignment.stretch;
                SearchButton {
                    place_no: 1;
                    text_value: "Apps";
                }

                SearchButton {
                    place_no: 2;
                    text_value: "Clipboard";
                }

                SearchButton {
                    place_no: 3;
                    text_value: "Wifi";
                }

                SearchButton {
                    place_no: 4;
                    text_value: "Bluetooth";
                }

                SearchButton {
                    place_no: 4;
                    text_value: "Walls";
                }

                SearchButton {
                    place_no: 4;
                    text_value: "Color Picker";
                }

                SearchButton {
                    place_no: 4;
                    text_value: "Emojis";
                }
            }
        }
    }

    Text {
        x: root.width - 57px;
        horizontal-alignment: TextHorizontalAlignment.center;
        vertical-alignment: TextVerticalAlignment.center;
        text: "04:16 PM";
        color: Styles.font-color-light;
    }
}

export component InputEx inherits Window {
    background: transparent;
    Rectangle {
        clip: true;
        x: 30px;
        width: 495px;
        height: 35px;
        background: Styles.dark-background;
        entryarea := LineEdit {
            y: 5px;
            width: parent.width;
            height: 25px;
            x: 5px;
            placeholder-text: "Search Apps..";
        }
    }
}

export component AppWindow inherits Window {
    in-out property <int> counter: 42;
    callback request-increase-value();
    width: 276px;
    height: 576px;
    VerticalBox {
        Text {
            text: "Counter: \{root.counter}";
        }

        Button {
            text: "Increase value";
            clicked => {
                root.request-increase-value();
            }
        }
    }
}

export component Resize inherits Window {
    in-out property <int> counter: 42;
    callback request-increase-value();
    VerticalBox {
        Text {
            text: "Counter: \{root.counter}";
        }

        Button {
            text: "Increase value";
            clicked => {
                root.request-increase-value();
            }
        }
    }
}

export component LockScreen inherits Window {
    in-out property <bool> is_lock_activated: false;
    in-out property <bool> lock_error: false;
    callback check-pass(string);
    Rectangle {
        Image {
            source: @image-url("../../../../assets/wallpapers/city lights/wallpaperflare.com_wallpaper(5).jpg");
        }

        TouchArea {
            clicked => {
                if is_lock_activated {
                    is_lock_activated = false;
                } else {
                    is_lock_activated = true;
                }
            }
        }
    }

    Rectangle {
        x: is_lock_activated ? root.width - 350px : root.width;
        // x: root.width - 350px;
        // opacity: is_lock_activated ? 100 : 0;
        width: 350px;
        Image {
            source: @image-url("../../../../Downloads/frosted glass_2.jpg");
        }

        Rectangle {

            Text {
                x: 50px;
                y: 220px;
                vertical-alignment: TextVerticalAlignment.center;
                horizontal-alignment: TextHorizontalAlignment.center;
                color: Styles.font-color-light;
                font-size: 75px;
                font-family: "Source Code Pro";
                // font-family: "DS DIGI Orbitron-Regular";
                text: "08:45";
            }

            Text {
                x: 275px;
                y: 258px;
                vertical-alignment: TextVerticalAlignment.center;
                horizontal-alignment: TextHorizontalAlignment.center;
                color: Styles.font-color-light;
                font-size: 35px;
                font-family: "Source Code Pro";
                text: "AM";
            }

            Text {
                y: 310px;
                vertical-alignment: TextVerticalAlignment.center;
                horizontal-alignment: TextHorizontalAlignment.center;
                color: Styles.font-color-light;
                font-size: 35px;
                font-family: "Source Code Pro";
                text: "Welcome Back!";
            }

            LineEdit {
                input-type: password;
                height: 37px;
                width: 260px;
                font-size: 20px;
                placeholder-text: " Enter Password";
                accepted(text) => {
                    root.check-pass(text);
                }
                init => {
                    self.focus();
                }
            }

            Text {
                y: 410px;
                font-size: 25px;
                font-family: "Source Code Pro";
                text: "Incorrect Password";
                opacity: lock_error ? 100 : 0;
            }

            Text {
                y: parent.height - 50px;
                font-size: 20px;
                color: pink;
                font-weight: 60;
                font-family: "Orbitron Variable";
                text: "Entering Terra Incognita Space !!";
            }
        }

        animate x {
            delay: 200ms;
            duration: 500ms;
            easing: ease-in-out-quad;
        }
    }
}

export component Workspaces inherits Window {
    in-out property <[bool]> is-filled: [false, false, false, false, false, false, false, false, false, false];
    in-out property <[bool]> is-active: [false, false, false, false, false, false, false, false, false, false];
    callback refresh-workspaces();
    callback refresh-vol();
    callback refresh-info();
    callback change_called(int);
    width: 9px;
    x: 0px;
    height: 738px;
    background: black;

    Timer {
        interval: 300ms;
        triggered => {
            refresh-workspaces();
            refresh-vol();
        }
    }

    Timer {
        interval: 3s;
        triggered => {
            refresh-info();
        }
    }

    VerticalLayout {
        x: 0px;
        alignment: LayoutAlignment.space-around;
        height: 765px;
        spacing: 4px;
        for i in 10: WorkspaceButton {
            sugg_int: (parent.height - 20px) / 10;
            is_filled: is-filled[i];
            is-active: is-active[i];
            change_called => {
                change_called(i)
            }
        }
    }
}
