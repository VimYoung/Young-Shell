import { Styles } from "styles.slint";
export component PowerMenuButton inherits Rectangle {
    in property <image> icon;
    in property <image> icon-open;
    in property <string> label;
    in property <bool> is-open: false;
    in property <length> button-width: 30px;
    in property <bool> is-special: false;
    callback clicked();

    width: button-width;
    height: 40px;
    background: Styles.light-blue;
    border-radius: 10px;
    clip: true;

    // HorizontalLayout {
    //     padding: Styles.padding - 3px;
    //     width: root.width;
    //     alignment: LayoutAlignment.start;
    //     spacing: Styles.padding;

    label-text := Text {
        text: label;
        color: Styles.font-color-dark;
        font-family: "Urbanist-Bold";
        font-weight: 500;
        font-size: 23px;
        x: is-open ? 34px : -180px;
        vertical-alignment: TextVerticalAlignment.center;

        animate x { duration: 200ms; }
        // }
    }

    Rectangle {
        background: Styles.light-blue;
        x: 0px;
        width: is-special ? root.width : 30px;
        Image {
            x: is-special ? (is-open ? 75px : 5px) : 5px;
            width: 20px;
            source: is-special ? (is-open ? icon-open : icon) : icon;
            colorize: Styles.font-color-dark;
            animate x { duration: 200ms; }
        }
    }

    TouchArea {
        clicked => {
            root.clicked();
        }
    }
}

export component MenuButton {
    in property <image> icon;
    callback clicked();
    // width: menu.width - (root.width );
    width: 50px;
    height: 50px;
    Rectangle {
        border-radius: 20px;
        background: #AEEEEE;
        Image {
            width: root.width - 28px;
            source: icon;
        }

        TouchArea {
            clicked => {
                root.clicked();
            }
        }
    }
}

export component GeneralButton inherits Rectangle {
    in property <image> icon: @image-url("../assets/icons/chevron-right.svg");
    in property <length> button-width: 35px;
    in property <length> button-rad: 15px;
    background: #015B96;
    border-radius: button-rad;
    width: button-width;
    min-height: 30px;
    Image {
        width: 20px;
        source: icon;
        colorize: white;
    }

    TouchArea {
        clicked => {
        }
    }
}

export component AppDisplayButton inherits Rectangle {
    callback open_app();
    in property <image> image_path: @image-url("/home/ramayen/assets/app_images/.icons/logseq.png");
    in property <string> app_name: "Discord";
    in property <bool> is_app_selected: false;
    height: 50px;
    border-width: 2px;
    border-radius: 15px;
    background: sensor.has-hover ? Styles.base-background : Styles.dark-background;
    border-color: Styles.border-color;
    HorizontalLayout {
        spacing: 20px;
        alignment: LayoutAlignment.start;
        padding: 9px;
        Image {
            y: 5px;
            height: 35px;
            width: 35px;
            source: image_path;
        }

        Text {
            vertical-alignment: TextVerticalAlignment.center;
            color: Styles.font-color-light;
            text: app_name;
            font-size: 25px;
        }
    }

    sensor := TouchArea {
        clicked => {
            root.open_app()
        }
    }
}

export component WifiButton inherits Rectangle {
    in-out property <string> name;
    in-out property <int> strength;
    callback connect();
    height: 50px;
    // width: 390px;
    x: 0px;
    border-width: 2px;
    border-radius: 15px;
    background: sensor.has-hover ? Styles.base-background : Styles.dark-background;
    border-color: Styles.border-color;
    HorizontalLayout {
        spacing: 20px;
        alignment: LayoutAlignment.start;
        padding: 9px;
        Text {
            vertical-alignment: TextVerticalAlignment.center;
            color: Styles.font-color-light;
            text: strength;
            font-size: 25px;
        }

        Text {
            vertical-alignment: TextVerticalAlignment.center;
            color: Styles.font-color-light;
            text: name;
            font-size: 25px;
        }
    }

    sensor := TouchArea {
        clicked => {
            root.connect()
        }
    }
}

export component SearchButton inherits Rectangle {
    in-out property <int> place_no;
    in-out property <string> text_value: "Unknown";
    in property <bool> is-selected;
    callback on-clicked();
    border-radius: 10px;
    border-width: 2px;
    height: 23px;
    border-color: is-selected ? Styles.pink-border : Styles.border-color;
    background: is-selected ? (sensor.has-hover ? Styles.pink-background-dark : Styles.pink-background) : (sensor.has-hover ? Styles.hover-background : Styles.dark-background);
    Text {
        x: 8px;
        y: 7px;
        horizontal-alignment: TextHorizontalAlignment.left;
        vertical-alignment: TextVerticalAlignment.bottom;
        text: place_no;
        font-size: 10px;
        color: is-selected ? pink : Styles.font-color-light;
    }

    Text {
        vertical-alignment: TextVerticalAlignment.center;
        text: text_value;
        color: is-selected ? pink : Styles.font-color-light;
    }

    animate border-width, border-color, background { duration: 150ms; }

    sensor := TouchArea {
        clicked => {
            root.on-clicked();
        }
    }
}

export component WorkspaceButton inherits Rectangle {
    in-out property <length> sugg_int;
    in-out property <bool> is-active: false;
    in-out property <bool> is-filled: false;
    callback change_called();
    width: 5px;
    height: sugg_int;
    border-radius: self.width / 2;
    // background: is-active ? (sensor.has-hover ? Styles.pink : Styles.pink-background) : (sensor.has-hover ? Styles.light-blue : (is-filled ? Styles.hover-background : Styles.base-background));
    background: sensor.has-hover ? Styles.light-blue : (is-active ? Styles.pink : (is-filled ? Styles.hover-background : Styles.base-background));
    sensor := TouchArea {
        clicked => {
            change_called();
        }
    }

    animate background { duration: 200ms; }
}

export component BarButton inherits Rectangle {
    in-out property <length> position;
    in-out property <length> button-width;
    in-out property <bool> is_search_on;
    in-out property <string> display_text;
    callback on_clicked();
    x: position;
    y: is_search_on ? 30px : 5px;
    height: 20px;
    width: button-width;
    border-radius: 8px;
    background: Styles.base-background;
    animate y { duration: 200ms; }
    Text {
        text: display_text;
        font-size: 10px;
    }

    sensor := TouchArea {
        clicked => {
            on_clicked();
        }
    }
}
